<?php namespace ProcessWire;

use RRule\RRule;

/**
 * FieldtypeEvents: InputfieldEvent
 *
 * Collects input for FieldtypeEvents fields. This accompanies the FieldtypeEvents as a demonstration
 * of creating a multi-value Fieldtype and Inputfield.
 *
 */
class InputfieldRecurringDates extends Inputfield
{
    public static function getModuleInfo()
    {
        return array(
          'title'    => 'Recurring Dates',
          'version'  => 001,
          'summary'  => 'Field that lets you define a recurring date rule.',
          'icon'     => 'calendar-o',
					'requires'=> 'AlpineJS'
        );
    }

    const defaultRows = 5;
    private static $alpine_added = false;
    public function __construct()
    {
        parent::__construct();
    }

    public function init()
    {
        /*$this->addHookAfter('AdminThemeUikit::renderFile', function ($e) {
            bd($e->arguments(0));
        });*/
        //if(!self::$alpine_added) {
        /*$this->addHookAfter('AdminTheme::getExtraMarkup', function ($e) {
            $parts = $e->return;
            $parts['head'] .= "<script defer src='https://unpkg.com/alpinejs@3.10.2/dist/cdn.min.js'></script>";
            //$parts['head'] .= '<script src="https://cdn.jsdelivr.net/npm/dayjs@1.11.5/dayjs.min.js"></script>';
            //$parts['head'] .= '<script src="https://cdn.jsdelivr.net/npm/dayjs@1.11.5/plugin/utc.js"></script>';
            //$parts['head'] .= '<script>dayjs.extend(window.dayjs_plugin_utc)</script>';
            InputfieldRecurringDates::$alpine_added = true;
            $e->return = $parts;
        });*/
        //}
        //$alpineSource = "";
        //$this->config->scripts->add($alpineSource);
    }

    /*public function renderReady(Inputfield $parent = null, $renderValueMode = false){
        $this->config->scripts->add("https://unpkg.com/alpinejs@3.10.2/dist/cdn.min.js", [
          'defer' => ''
        ]);
        parent::renderReady($parent, $renderValueMode);
    }*/


    /*
        public function renderReady(Inputfield $parent = null, $renderValueMode = false)
        {
            $config = $this->config;
            if(!$config->js("InputfieldRepeatingDates_{$this->name}")) {
                $config->js("InputfieldRepeatingDates_{$this->name}", [
                  '' => ""
                ]);
            }
        return parent::renderReady($parent, $renderValueMode); // TODO: Change the autogenerated stub
    }
    */

    public function ___render()
    {
        /** @var RecurringDate $recurring_dates */
        $recurring_dates = $this->value;
        //bd($recurring_dates);
        $this->setAttribute('class', $this->getAttribute('class') . ' main-input uk-width-1-1');

        $occurrences = $recurring_dates->occurrences;
        //$rule_json = "{}";
        if($recurring_dates->rrule) {
            $rule_json = json_encode($recurring_dates->rrule->getRule());
        }

        $this->setAttribute('class', 'uk-input main-input');
        if($rule_json) {
            $this->setAttribute('value', [$rule_json]);
        }
        $this->setAttribute('x-ref', 'main-input');
        $this->setAttribute('x-model', '_rrule');
        $this->setAttribute('data-rrule', $rule_json  );
        $this->setAttribute('type', 'hidden');
        $this->setAttribute('data-settings', $recurring_dates->settings);


        $out = "";
        $filePath = "{$this->config->paths->siteModules}FieldtypeRecurringDates/partials/AlpineComponent.php";
        $alpineComponent = wireRenderFile($filePath, [
          'fieldtype'  => $this->hasFieldtype,
          'inputfield' => $this,
          'occurrences'      => $occurrences,
          'inputfieldValue' => $recurring_dates
        ]);

        $out .= $alpineComponent;
        return $out;
    }


    public function ___renderValue()
    {
        $fieldtype = $this->hasFieldtype;
        return $fieldtype->markupValue($this->hasPage, $this->hasField, $this->value);
    }


    public function ___processInput(WireInputData $input)
    {
        //bd($input);
        //$input->post
        $name = $this->attr('name');
        $recurring_date_obj = new RecurringDate();
        $value = $input[$name];
        $settings = $input[$name . "_settings"];

        if($value === "") return $recurring_date_obj;

        $recurring_date_obj->settings = $settings;
        //$recurring_date_obj->rrule = $value;
        $value = json_decode($value, true);

        // New RRule from input
        $rrule = new RRule($value);
        $recurring_date_obj->rrule = $rrule;

        // Compare existing value with new RRule array
        $existing_rule = null;
        if ($this->attr('value')->rrule) {
            $existing_rule = $this->attr('value')->rrule->getRule();
        }

        // Check if RRule array value is different than existing one
        if($existing_rule !== $rrule->getRule()){
            foreach ($rrule as $date) {
                $occurrence_date = new Occurrence();
                $occurrence_date->excluded = false;
                $occurrence_date->date = $date;
                $recurring_date_obj->occurrences->add($occurrence_date);
                //$dates->add($ocurrence_date);
            }

            $this->val($recurring_date_obj);
            $this->trackChange('value');
            return $this;
        }
        return $this;

    }
}
