<?php namespace ProcessWire;

use RRule\RRule;

/**
 * FieldtypeEvents: InputfieldEvent
 *
 * Collects input for FieldtypeEvents fields. This accompanies the FieldtypeEvents as a demonstration
 * of creating a multi-value Fieldtype and Inputfield.
 *
 */
class InputfieldRecurringDates extends Inputfield
{
    const defaultRows = 5;

    public function __construct()
    {
        parent::__construct();
        //$this->setAttribute('type', 'textarea');
        //$this->setAttribute('rows', self::defaultRows);
    }

    public function init()
    {
        $this->addHookAfter('AdminTheme::getExtraMarkup', function ($e) {
            $parts = $e->return;
            $parts['head'] .= "<script defer src='https://unpkg.com/alpinejs@3.10.2/dist/cdn.min.js'></script>";
            $parts['head'] .= '<script src="https://cdn.jsdelivr.net/npm/dayjs@1.11.5/dayjs.min.js"></script>';
            $parts['head'] .= '<script src="https://cdn.jsdelivr.net/npm/dayjs@1.11.5/plugin/utc.js"></script>';
            $parts['head'] .= '<script>dayjs.extend(window.dayjs_plugin_utc)</script>';
            //bd($parts);
            $e->return = $parts;
        });
        //$alpineSource = "";
        //$this->config->scripts->add($alpineSource);
    }

    public static function getModuleInfo()
    {
        return array(
          'title'    => 'InputfieldRecurringDates',
          'version'  => 001,
          'summary'  => 'Input field for recurring dates.',
          'icon'     => 'calendar-o',
          'requires' => 'FieldtypeRecurringDates',
        );
    }


    public function ___render()
    {
        $this->setAttribute('class', $this->getAttribute('class') . ' main-input uk-width-1-1');
        $saved_rrule = $this->hasPage()->meta()->get($this->name);

        $parsed_rule = new RRule($saved_rrule);
        $parsed_rule = $parsed_rule->getRule();

        $encoded_json = json_encode($parsed_rule, JSON_HEX_APOS);

        $occurrences = $this->value;
        //bd($dates);
        $this->setAttribute('class', 'uk-input main-input');
        $this->setAttribute('value', [$encoded_json]);
        $this->setAttribute('x-ref', 'main-input');
        $this->setAttribute('x-model', '_rrule');
        $this->setAttribute('data-json-rrule', $encoded_json);

        $out = "";
        $filePath = "{$this->config->paths->siteModules}FieldtypeRecurringDates/partials/AlpineComponent.php";
        $alpineComponent = wireRenderFile($filePath, [
          'fieldtype'  => $this->hasFieldtype,
          'inputfield' => $this,
          'occurrences'      => $occurrences
        ]);
        $out .= $alpineComponent;
        return $out;
    }


    public function ___renderValue()
    {
        $fieldtype = $this->hasFieldtype;
        return $fieldtype->markupValue($this->hasPage, $this->hasField, $this->value);
    }


    public function ___processInput(WireInputData $input)
    {
        $name = $this->attr('name');
        $recurring_dates = new OccurrenceArray();

        $value = $input[$name];

        $page = $this->hasPage;
        $value = json_decode($value, true);

        $rrule = new RRule($value);

        foreach ($rrule as $date) {
            $ocurrence_date = new Occurrence();
            $ocurrence_date->excluded = false;

            $ocurrence_date->date = $date;
            $recurring_dates->add($ocurrence_date);
        }
        bd($recurring_dates);
        $page->meta()->set($name, $value);
        $this->val($recurring_dates);
        $this->trackChange('value');

    }
}
