<?php namespace ProcessWire;

use RRule\RRule;

/**
 * FieldtypeRecurringDates
 *
 * Fieldtype for a field that stores events each with a date and title
 *
 * This is an example of creating your own FieldtypeMulti to represent a spreadsheet type table of information.
 *
 */
class FieldtypeRecurringDates extends FieldtypeMulti
{


    public static function getModuleInfo()
    {
        return array(
          'title' => 'Recurring Dates',
          'version' => 001,
          'summary' => 'Field that stores recurring events from rrule input.',
          'icon' => 'calendar-o',
          'installs' => 'InputfieldRecurringDates'
        );
    }

    const defaultLimit = 10;
    const EXTRAS_TABLE_NAME_SUFFIX = '_extras';
    const EXTRAS_TABLE_COLS = [
      'pages_id',
      'rrule',
      'settings'
    ];

    /**
     * Construct the Fieldtype, make sure all dependencies are in place
     *
     */

    public function __construct()
    {
        $this->set('usePagination', true);
        $this->set('useOrderByCols', true);
        require_once(__DIR__ . '/RecurringDateSettings.php');
        require_once(__DIR__ . '/RecurringDate.php');
        require_once(__DIR__ . '/Occurrence.php');
        require_once(__DIR__ . '/OccurrenceArray.php');
        parent::__construct();
    }

    public function init()
    {

        $this->addHook('/fieldtype-recurring-dates/get-dates/', $this, 'hookGetDates');
        $this->addHookAfter('Fields::added', $this, 'hookAfterFieldAdded');
        $this->addHookAfter('Fields::deleted', $this, 'hookAfterFieldDeleted');
        $this->addHookAfter('Fields::deleted', $this, 'hookAfterFieldDeleted');
        $this->addHookBefore('Pages::deleted', $this, 'hookAfterPageDelete');
    }

    public function hookGetDates($event){

        if(!$event->user->isLoggedin()) return false;

        $input = $event->input;
        $page = $input->get->int('id');
        $field = $input->get->int('field_id');
        $start = $input->get->int('start');
        $limit = $input->get->int('limit');

        if(!$page || !$field) return "{}";

        $field_name = $event->fields->get($field)->name;
        $page = $event->pages->get($page);
        $value = $page->$field_name("start=$start, limit=$limit, sort=data");
        //bd($value);
        return $value->occurrences;
    }

    /**
     * Adds the rrule settings table
     *
     * @return void
     *
     */
    public function hookAfterFieldAdded($event)
    {
        $item = $event->arguments(0);
        if ($item->type->name == $this->name) {
            $table_name = $this->getExtrasTableName($item);
            $create_rrules_table = "";
            $create_rrules_table .=
              "DROP TABLE IF EXISTS $table_name;" .
              "CREATE TABLE $table_name (" .
              "pages_id INT UNSIGNED NOT NULL, " .
              "rrule MEDIUMTEXT NOT NULL," .
              "settings MEDIUMTEXT NOT NULL," .
              "PRIMARY KEY (`pages_id`)," .
              "UNIQUE KEY (`pages_id`)" .
              ")";
            try {
                $query = $this->database->prepare($create_rrules_table);
                $query->execute();
            } catch (\Exception $e) {
                $this->database->error($e->getMessage());
            }
        }
    }

    public function hookAfterPageDelete($event)
    {
        $pages = $event->object;
        $page = $event->arguments(0);
        $options = $event->arguments(1);
        $recurring_fields = $page->getFields()->find("type={$this->name}");
        foreach ($recurring_fields as $f) {
            $this->deleteSettings($page, $f);
        }
    }

    public function hookAfterFieldDeleted($event)
    {
        $item = $event->arguments(0);
        if ($item->type->name == $this->name) {
            $table_name = $this->getExtrasTableName($item);
            $create_rrules_table = "";
            $create_rrules_table .= "DROP TABLE IF EXISTS $table_name;";
            try {
                $query = $this->database->prepare($create_rrules_table);
                $query->execute();
            } catch (\Exception $e) {
                $this->database->error($e->getMessage());
            }
        }
    }


    public function getRruleOCurrences($value)
    {
        $rrule = new RRule($value);
        return $rrule;
    }

    /**
     * Return the database schema that defines an Ocurrence
     *
     * @param Field $field
     * @return array
     *
     */
    public function getDatabaseSchema(Field $field)
    {
        $schema = parent::getDatabaseSchema($field);
        $schema['id'] = 'INT UNSIGNED NOT NULL AUTO_INCREMENT';
        $schema['keys']['primary'] = 'PRIMARY KEY (id)';
        $schema['data'] = 'datetime NOT NULL';
        $schema['excluded'] = 'tinyint NOT NULL';
        $schema['keys']['data'] = 'KEY data (data)';
        return $schema;
    }

    /**
     * Return the Inputfield used to collect input for a field of this type
     *
     * @param Page $page
     * @param Field $field
     * @return Inputfield|InputfieldRecurringDates
     *
     */
    public function getInputfield(Page $page, Field $field)
    {
        $inputfield = $this->modules->get('InputfieldRecurringDates');
        /** @var InputfieldRecurringDates $inputfield */
        return $inputfield;
    }

    /**
     * Return a blank ready-to-populate value
     *
     * @param Page $page
     * @param Field $field
     * @return RecurringDate
     *
     */
    public function getBlankValue(Page $page, Field $field)
    {
        return new RecurringDate();
        //return new OccurrenceArray();
    }

    /**
     * Given a value, make it clean and of the correct type for storage within a Page
     *
     * @param Page $page
     * @param Field $field
     * @param EventArray $value
     * @return mixed
     *
     */
    public function sanitizeValue(Page $page, Field $field, $value)
    {
        // if given an invalid value, return a valid blank value
        return $value;
    }

    protected function isSettingsValue($value)
    {
        $count = 0;
        $keys = self::EXTRAS_TABLE_COLS;
        foreach ($keys as $key) {
            if (isset($value[$key]) || array_key_exists($key, $value)) {
                $count++;
            }
        }

        if ($count == 3) {
            return true;
        } else {
            return false;
        }
        //if(array_key_exists(''))
    }

    public function ___wakeupValue(Page $page, Field $field, $value)
    {
        $recurring_date = $this->getBlankValue($page, $field);
        $recurring_date->settings = json_encode($recurring_date->settings, true);
        if (empty($value) || !is_array($value)) return $recurring_date;
        bd($value);
        if ($this->isSettingsValue($value)) {
            $recurring_date->settings = $value['settings'];
            $rrule_value = json_decode($value['rrule'], true);
            $rrule = new RRule($rrule_value);
            $recurring_date->rrule = $rrule;
        } else {
            $settings = $this->getSettings($page, $field);
            if($settings) {
                $recurring_date->settings = $settings->settings;
                $rrule_value = json_decode($settings->rrule, true);
                $rrule = new RRule($rrule_value);
                $recurring_date->rrule = $rrule;
            }

            if (isset($value['_pagination_limit'])) {
                $recurring_date->occurrences->setLimit($value['_pagination_limit']);
                $recurring_date->occurrences->setStart($value['_pagination_start']);
                $recurring_date->occurrences->setTotal($value['_pagination_total']);
            }
            unset($value['_pagination_limit'], $value['_pagination_start'], $value['_pagination_total']);
            if (isset($value['_filters']) && $value['_filters'] instanceof Selectors) {
                $recurring_date->occurrences->data('filters', $value['_filters']);
                unset($value['_filters']);
            }
            foreach ($value as $key => $v) {
                $occurrence = new Occurrence();
                $occurrence->date = (new \DateTime($v['data']));
                $occurrence->excluded = $v['excluded'] ? true : false;
                $occurrence->resetTrackChanges();
                $recurring_date->occurrences->add($occurrence);
            }
        }
        // tell it to start tracking changes from this point forward
        $recurring_date->resetTrackChanges();
        return $recurring_date;
    }

    /**
     * Given an EventArray value, convert the value back to an array for storage in DB
     *
     * @param Page $page
     * @param Field $field
     * @param array $value
     * @return array
     *
     */

    public function ___sleepValue(Page $page, Field $field, $value)
    {

        $sleepValue = array();
        if ($value->rrule) {
            $this->saveSettings($page, $field, $value);
        }
        //bd($page);
        if (!$value instanceof RecurringDate) return $sleepValue;
        // make the events sort by date ascending
        // $value->occurrences->sort('date');

        // convert each Event to an array within sleepValue
        foreach ($value->occurrences as $occurrence) {
            // if no date specified then skip it
            if (!$occurrence->date) continue;
            // if($occurrence->formatted) throw new WireException('Formatted events cannot be saved');
            $sleepValue[] = array(
              'data' => $occurrence, // note: 'date' is becoming 'data' (with an 'a')
              'excluded' => $occurrence->excluded
            );
        }

        return $sleepValue;
    }

    /**
     * Render a markup string of the value (optional for Fieldtypes to implement)
     *
     * @param Page $page
     * @param Field $field
     * @param EventArray $value
     * @param string $property Property to render or omit for all
     * @return string|MarkupFieldtype
     *
     */

    public function ___markupValue(Page $page, Field $field, $value = null, $property = '')
    {
        /*if (!$value instanceof RecurrentD) $value = $page->get($field->name);
        if (!$value instanceof EventArray || !$value->count()) return '';
        $a = [];
        foreach ($value as $event) {
            if ($property) {
                $a[] = $this->sanitizer->entities1($event->get($property));
            } else {
                $a[] = $this->sanitizer->entities1("$event->date");
            }
        }
        return "<ul><li>" . implode("</li><li>", $a) . "</li></ul>";*/
        return $value;
    }

    public function getMonths()
    {
        $months = [];
        for ($m = 1; $m <= 12; $m++) {
            $months[] = date('F', mktime(0, 0, 0, $m, 1, date('Y')));
        }
        return $months;
    }

    public function getLoadQuery(Field $field, DatabaseQuerySelect $query)
    {
        if ($this->wire()->process instanceof WirePageEditor) {
            $query = parent::getLoadQuery($field, $query);
            $query->set('select', []);
            foreach (self::EXTRAS_TABLE_COLS as $col) {
                $selects[] = "{$this->getExtrasTableName($field)}.{$col} AS `{$field->name}__{$col}`";
            }
            $query->remove('orderby');
            foreach ($selects as $s) {
                $query->select($s);
            }
            return $query;
        } else {
            return parent::getLoadQuery($field, $query);
        }
    }

    public function ___loadPageField(Page $page, Field $field)
    {
        if (!$page->id || !$field->id) return null;

        if ($this->wire()->process instanceof WirePageEditor) {
            /* Copied from Fieldtype.php */

            $database = $this->wire()->database;
            $schema = $this->getDatabaseSchema($field);
            //$table = $database->escapeTable($field->table);
            $table = $this->getExtrasTableName($field);
            $stmt = null;

            /** @var DatabaseQuerySelect $query */
            $query = $this->wire(new DatabaseQuerySelect());
            $query = $this->getLoadQuery($field, $query);
            $bindKey = $query->bindValueGetKey($page->id);
            $query->where("$table.pages_id=$bindKey");
            $query->from($table);

            try {
                $stmt = $query->prepare();
                $result = $database->execute($stmt);
            } catch (\Exception $e) {
                $result = false;
                $this->trackException($e, false, true);
            }

            if (!$result) return null;

            $fieldName = $database->escapeCol($field->name);
            $columns = $database->getColumns($this->getExtrasTableName($field));

            $row = $stmt->fetch(\PDO::FETCH_ASSOC);
            $stmt->closeCursor();

            if (!$row) return null;

            $value = array();

            foreach ($columns as $k) {
                $key = $fieldName . '__' . $k;
                $value[$k] = $row[$key];
            }
            // if there is just one 'data' field here, then just make 'data' the value
            if (count($value) == 1 && isset($value['data'])) $value = $value['data'];
            return $value;

        } else {
            return parent::___loadPageField($page, $field);
        }


    }


    /**
     * Saves rrule string when field is saved.
     *
     * @param Page $page
     * @param Field $field
     * @param RecurringDate $rule
     * @return void
     */
    protected function saveSettings(Page $page, Field $field, RecurringDate $rdate)
    {

        $sql = "INSERT INTO {$this->getExtrasTableName($field)} (pages_id, rrule, settings) VALUES(:pages_id, :rrule, :settings) ON DUPLICATE KEY UPDATE pages_id=:pages_id, rrule=:rrule, settings=:settings";
        /** @var \PDOStatement $pdo */
        $pdo = $this->database->prepare($sql);
        $pdo->bindValue(':pages_id', $page->id);
        $pdo->bindValue(':rrule', json_encode($rdate->rrule->getRule()));
        $pdo->bindValue(':settings', (string)$rdate->settings);
        $pdo->execute();
    }

    /**
     * Saves rrule string when field is saved.
     *
     * @param Page $page
     * @param Field $field
     * @return void
     */
    protected function deleteSettings(Page $page, Field $field)
    {
        $sql = "DELETE FROM {$this->getExtrasTableName($field)} WHERE pages_id = :id";
        /** @var \PDOStatement $pdo */
        $pdo = $this->database->prepare($sql);
        $pdo->bindValue(':id', $page->id);
        $pdo->execute();
    }

    protected function getSettings(Page $page, Field $field)
    {
        $sql = "SELECT rrule, settings FROM {$this->getExtrasTableName($field)} WHERE pages_id=:pages_id";
        $pdo = $this->database->prepare($sql);
        $pdo->bindValue(':pages_id', $page->id);
        $pdo->execute();
        return $pdo->fetch(\PDO::FETCH_OBJ);
    }

    public function getExtrasTableName(Field $field)
    {
        return $field->getTable() . self::EXTRAS_TABLE_NAME_SUFFIX;
    }

}
